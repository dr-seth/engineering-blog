<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Engineering at Monsanto</title>
        <description>The engineers of Monsanto produce code that powers agricultural products that support farmers all around the world. Our goal of sustainable agriculture mirrors the way we present our ideas and code to the world.</description>
        <link>http://engineering.monsanto.com</link>
        <atom:link href="http://engineering.monsanto.com/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Better Spray metrics with Kamon</title>
                
                
                    <description>&lt;p&gt;At Monsanto, we have adopted &lt;a href=&quot;http://www.kamon.io&quot; title=&quot;The Open Source tool for monitoring applications running on the JVM&quot;&gt;Kamon&lt;/a&gt; for monitoring our microservices
implemented in Scala with &lt;a href=&quot;http://spray.io/&quot; title=&quot;Elegant, high-performance HTTP for your Akka Actors&quot;&gt;Spray&lt;/a&gt;.  Kamon provides an
&lt;a href=&quot;http://kamon.io/integrations/web-and-http-toolkits/spray/&quot; title=&quot;Kamon Spray integration&quot;&gt;integration&lt;/a&gt; that will automatically instrument our services to
generate traces for each incoming request.  This is great, but we wanted more.
Some of the things we wanted to improve included:&lt;/p&gt;
</description>
                
                <pubDate>Thu, 24 Sep 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/09/24/better-spray-metrics-with-kamon/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/09/24/better-spray-metrics-with-kamon/</guid>
            </item>
        
            <item>
                <title>Learn implicits: Type classes</title>
                
                
                    <description>&lt;style scoped&gt;
  .pimpedAny { color: #D907E8 }
  .implicitdef { color: #1AB955 }
  .implicitparam { color: #FF9C00 }
  .toJson {color: #BA182F }
  .jsValue {color: #08B9D1 }
  .contextbound {color: #D15308 }
&lt;/style&gt;
</description>
                
                <pubDate>Wed, 23 Sep 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/09/23/implicits-typeclasses/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/09/23/implicits-typeclasses/</guid>
            </item>
        
            <item>
                <title>Cluster Lightly</title>
                
                
                    <description>&lt;p&gt;As the amount of available technology increases so does the amount of available data.  Of this newly available data,
much of it is concerned with two major questions:&lt;/p&gt;
</description>
                
                <pubDate>Mon, 21 Sep 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/09/21/leaflet-light-cluster/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/09/21/leaflet-light-cluster/</guid>
            </item>
        
            <item>
                <title>Cloud Foundry Metrics</title>
                
                
                    <description>&lt;p&gt;In the second installation of our open source &lt;a href=&quot;http://engineering.monsanto.com/2015/07/22/building-an-open-source-cloud-foundry-toolbox/&quot;&gt;Cloud Foundry (CF) toolbox series&lt;/a&gt; we would like to introduce &lt;a href=&quot;https://github.com/MonsantoCo/cf-metrics&quot;&gt;CF-Metrics&lt;/a&gt;, a comprehensive solution for Cloud Foundry monitoring and alerting based solely on open source projects.  In a world of unreliable cloud infrastructure and distributed micro service architectures, monitoring and alerting are as critical now as they&amp;#39;ve ever been.  Even when you learn to expect failure (or better yet &lt;a href=&quot;https://github.com/strepsirrhini-army/chaos-lemur&quot;&gt;embrace it&lt;/a&gt;) and build self healing platforms like Cloud Foundry, you still need monitoring and alerting to analyze why there was a failure and how to make it not happen again in the future.&lt;/p&gt;
</description>
                
                <pubDate>Thu, 20 Aug 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/08/20/cf-metrics/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/08/20/cf-metrics/</guid>
            </item>
        
            <item>
                <title>Building a simple Spray application</title>
                
                
                    <description>&lt;p&gt;You&amp;#39;ve probably heard people talk about Spray by now; maybe you&amp;#39;re
even using it for JSON serialization.  Spray also provides a
lightweight server package to allow you easily create REST services.
The hardest part of getting started with any new technology is getting
past that initial contact of setup and concepts.  I&amp;#39;ll try to reduce
that hurdle by walking you through a simple app that hits most of the
features you might regularly use.&lt;/p&gt;
</description>
                
                <pubDate>Tue, 11 Aug 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/08/11/simple-spray/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/08/11/simple-spray/</guid>
            </item>
        
            <item>
                <title>Learn implicits: Views as class extensions</title>
                
                
                    <description>&lt;p&gt;This is the third post in our series on Scala implicits. The earlier posts cover &lt;a href=&quot;http://engineering.monsanto.com/2015/05/14/implicits-intro/&quot;&gt;implicit type parameters&lt;/a&gt; and &lt;a href=&quot;http://engineering.monsanto.com/2015/06/15/implicits-futures/&quot;&gt;implicit parameters with futures&lt;/a&gt;. In this post, we discuss implicit conversions.&lt;/p&gt;
</description>
                
                <pubDate>Fri, 31 Jul 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/07/31/implicit-conversions/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/07/31/implicit-conversions/</guid>
            </item>
        
            <item>
                <title>Cloud Foundry Portal</title>
                
                
                    <description>&lt;p&gt;This segment of our open source Cloud Foundry (CF) toolbox series introduces &lt;a href=&quot;https://github.com/MonsantoCo/cf-portal&quot;&gt;CF-Portal&lt;/a&gt;, a basic read-only view into your Cloud Foundry application landscape.  CF-Portal was one of the first applications we made for our CF toolbox, since unlike the branded CF offerings, the community project lacks any pre-packaged UI.&lt;/p&gt;
</description>
                
                <pubDate>Wed, 29 Jul 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/07/29/cf-portal/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/07/29/cf-portal/</guid>
            </item>
        
            <item>
                <title>Testing without mocking in Scala</title>
                
                
                    <description>&lt;style scoped&gt;
  .interface { color: #D907E8 }
  .logic { color: #19BEFF }
  .jsonClient {color: #E80D0C }
  .functionParam {color: #1ab955 }
  .port {color: #FF9C00 }
  .pass {color: #D907E8 }
&lt;/style&gt;
</description>
                
                <pubDate>Tue, 28 Jul 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/07/28/avoiding-mocks/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/07/28/avoiding-mocks/</guid>
            </item>
        
            <item>
                <title>PaaSify your Apps</title>
                
                
                    <description>&lt;p&gt;The age of cloud computing is already here, and companies who don&amp;#39;t adapt are at serious risk of getting left in the dust.  At Monsanto we have fully embraced the transformation this revolution has brought and are diligently on the path towards a modern IT landscape focused around public cloud, microservices, open source technologies, and &lt;a href=&quot;http://12factor.net/&quot;&gt;12 factor apps&lt;/a&gt;.  Transformations however, rarely happen overnight and like most enterprise companies we were starting the journey with a datacenter full of legacy and not-so-cloudy apps.  So our first step was to adopt
&lt;a href=&quot;https://docs.cloudfoundry.org/concepts/overview.html&quot;&gt;Cloud Foundry&lt;/a&gt;, an open platform as a service which allowed our dev teams to start learning/adopting cloud designs on top of an agile platform in the safety of our private datacenter.  &lt;/p&gt;
</description>
                
                <pubDate>Wed, 22 Jul 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/07/22/building-an-open-source-cloud-foundry-toolbox/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/07/22/building-an-open-source-cloud-foundry-toolbox/</guid>
            </item>
        
            <item>
                <title>CloudFormation Template Generator</title>
                
                
                    <description>&lt;h2&gt;TL;DR&lt;/h2&gt;
</description>
                
                <pubDate>Fri, 10 Jul 2015 00:00:00 -0500</pubDate>
                <link>http://engineering.monsanto.com/2015/07/10/cloudformation-template-generator/</link>
                <guid isPermaLink="true">http://engineering.monsanto.com/2015/07/10/cloudformation-template-generator/</guid>
            </item>
        
    </channel>
</rss>
